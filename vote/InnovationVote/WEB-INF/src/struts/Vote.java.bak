package struts;

//import java.util.Date;
//import java.util.Calendar; 
import java.util.*;
import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;
import javax.servlet.ServletContext;  
import javax.servlet.http.HttpServletRequest;  
import javax.servlet.http.HttpServletResponse;  
import javax.servlet.http.HttpSession;  
import org.apache.struts2.ServletActionContext;  
import java.io.PrintWriter;
import  db.fun.*;
import  db.pojo.*;
public class Vote extends ActionSupport
{  
	private String UserNo;
	private String ProjectID;
	private String password;
	
  
	public Date TimeNow;
	public Date dbDate;
	public Date TimeStandard;
	public Date TimeChecked;
	public String Err="";
	public int  VoteNum;
	private String UserIP="";//得到客户端ip地址
	
		public void setProjectID(String ProjectID)
		 {
			this.ProjectID = ProjectID;
		 }
		 
		public String  getProjectID()
		{
		return this.ProjectID;
		}
		public void setUserNo(String UserNo)
		 {
			this.UserNo = UserNo;
		 }
		 
		public String  getUserNo()
		{
		return this.UserNo;
		}
		public void setPassword(String password)
		 {
			this.password = password;
		 }
		 
		public String  getPassword()
		{
		return this.password;
		}
		
	    //book user=new book();  user.field(UserNo);//我想的是直接用UserNo做参数，来从数据库中确定这个对象的其他参数。
	   // user.getTimeChecked();  //数据库中读取UserNo对应的TimeChecked
		public Boolean TimeValid ()
		{
		this.TimeNow=new Date();
     	this.TimeChecked=new FunUserData().getUserDatetime(UserNo);
     	Calendar c1 = Calendar.getInstance(); 
		Date dbDate=this.TimeChecked;
		c1.setTime(dbDate);
		c1.add(Calendar.HOUR_OF_DAY, 6);
		this.TimeStandard = c1.getTime();
		if( (this.TimeNow).after(this.TimeStandard) )
		return false;
		else  
		return true;
		
		}
  // public void VoteNum() //调数据库得到投票数    
   //{ this.VoteNum=new FunUserData().getUserVoteNum(UserNo);}           
   
   public Long VoteNum()                          //得到投票数    
   {return new FunUserData().getPollNumber(UserNo);}                       // user.getVotenum();//得到票数
   
   
   public Boolean Repeat()
   {if(new FunPollData().ifRepeat(ProjectID, UserNo))         //user.Repeat()//看投票是否重复
   	return true;
   	else 
   	return false;
   	} 
 
 
	public String execute()
	{
		 ActionContext.getContext().getSession().put("userID",UserNo);
		 ActionContext.getContext().getSession().put("password",password);
     HttpServletRequest request = ServletActionContext.getRequest();
 
      UserIP=request.getRemoteAddr();
     
	
	//try {
  	if(!new FunUserData().checkUser(UserNo,password))
  	{
  		 Err="您输入的用户名或密码不正确";
  		 try{PrintWriter out=ServletActionContext.getResponse().getWriter();
     out.write("fail");}
       catch(Exception e)  {
	    System.out.println("发生异常，登陆失败！");}
  		return null;
  	}
  	if( !new FunUserData().checkDoubleID(ProjectID,UserNo))
  	{
  			Err="没有此项目";
  			try{PrintWriter out=ServletActionContext.getResponse().getWriter();
     out.write("fail");}
       catch(Exception e)  {
	    System.out.println("发生异常，登陆失败！");}
  			return null;
  	}
  
  		
     if(!TimeValid()){
     	 Err="未有记录或已超时，请您去前台重新记录";
     	 try{PrintWriter out=ServletActionContext.getResponse().getWriter();
     out.write("timeout");}
       catch(Exception e)  {
	    System.out.println("发生异常，登陆失败！");}
     return null;}  
     
 	  if(new FunUserData().getPollNumber(UserNo)>=10)//VoteNumLimit投票上限=10票
 	  {Err="您的10票已投完";
 	  	try{PrintWriter out=ServletActionContext.getResponse().getWriter();
     out.write("voteout");}
       catch(Exception e)  {
	    System.out.println("发生异常，登陆失败！");}
 	  	return null; }
 	  	
    	    if(Repeat()) {
       Err="您已投过此项目";
       try{PrintWriter out=ServletActionContext.getResponse().getWriter();
     out.write("repeat");}
       catch(Exception e)  {
	    System.out.println("发生异常，登陆失败！");}	
     	return null; }
    		
   //------------------------------------------------------------------------------ 		
   //判断成功，进行投票	   
  
       new FunUserData().vote(ProjectID, UserNo, UserIP);
        Long ret=10L-new FunUserData().getPollNumber(UserNo);
        try{PrintWriter out=ServletActionContext.getResponse().getWriter();
     out.write(Long.toString(ret));}
       catch(Exception e)  {
	    System.out.println("发生异常，登陆失败！");}	   	   
 

       	
         return  null;
      
//catch(Exception e)  {
	//System.out.println("发生异常，登陆失败！");}					
    //	 return "login";
    //}
}
}